name: nightly

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set VERSION and COMMIT variables
        id: set_vars
        run: |
          VERSION="${GITHUB_SHA::7}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          COMMIT=${COMMIT_MSG//\'/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "COMMIT=$COMMIT" >> $GITHUB_ENV

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'

      - name: Cook KeyStore
        run: echo "${{ secrets.KEYSTORE_B64 }}" | base64 -d > "$GITHUB_WORKSPACE/signing-key.jks"
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: |
          ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/signing-key.jks \
          -Pandroid.injected.signing.store.password=${{ secrets.PASSWORD }} \
          -Pandroid.injected.signing.key.alias=key0 \
          -Pandroid.injected.signing.key.password=${{ secrets.PASSWORD }}
          cp app/build/outputs/apk/release/app-release.apk app/build/${{ env.VERSION }}.apk

      - name: Create GitHub Release
        if: ${{ env.SKIP_BUILD != 'true' && github.repository != 'brahmkshatriya/echo' }}
        uses: softprops/action-gh-release@v2.0.6
        with:
          files: app/build/outputs/apk/release/app-release.apk
          name: "${{ github.ref_name }} build ${{ env.VERSION }}"
          tag_name: "v${{ env.VERSION }}"
          body: |
            New Pretester Build ${{ env.VERSION }} released on branch "${{ github.ref_name }}" :)

            Commits:
            ${{ env.COMMIT }}
          prerelease: false
          make_latest: true
          generate_release_notes: true
          fail_on_unmatched_files: true

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          path: app/build/outputs/apk/release/app-release.apk

      - name: Upload APK to Discord
        shell: bash
        env:
          ROLE: ${{ secrets.DISCORD_PING_ROLE_ID }}
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          message="<@&${{ env.ROLE }}> **${{ env.VERSION }}**\n${{ env.COMMIT }}"
          curl -F "payload_json={\"content\":\"${message}\"}" \
               -F "echo_beta=@app/build/${{ env.VERSION }}.apk" \
               ${{ env.WEBHOOK }}
     
      - name: Upload APK to Telegram
        shell: bash
        env:
          BOT_ID: ${{ secrets.TELEGRAM_BOT_ID }}
          CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
        run: |
          message="*Nightly Release*\n${{ env.COMMIT }}"
          message=$(echo "$message" | sed -E 's/[_*\[\]()~`>#+=\|\{\}\.!]/\\&/g')
          curl -F "chat_id=${{ env.CHANNEL_ID }}" \
               -F "document=@app/build/${{ env.VERSION }}.apk" \
               -F "caption=${message}" \
               -F "parse_mode=MarkdownV2" \
               https://api.telegram.org/bot${{ env.BOT_ID }}/sendDocument
